import requests
import sqlite3
import time

API_KEY = "e4d04998880c3bf739e025355c5327b9"
READ_ACCESS_TOKEN = "eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJlNGQwNDk5ODg4MGMzYmY3MzllMDI1MzU1YzUzMjdiOSIsIm5iZiI6MTc0NDExNjY4My44Miwic3ViIjoiNjdmNTFiY2IzMWM5ZjI3Mjk5YWQ1N2Q5Iiwic2NvcGVzIjpbImFwaV9yZWFkIl0sInZlcnNpb24iOjF9.HfBkmYpFkpZrYinP53M1oa7oLhL2yqBd5t6JZAxSAPc"
HEADERS = {"Authorization": f"Bearer {READ_ACCESS_TOKEN}"}
BASE_URL = "https://api.themoviedb.org/3"

DB_NAME = "movies.db"

# ---------- DB SETUP ----------

def create_tmdb_table():
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()

    cur.execute("DROP TABLE IF EXISTS tmdb_table")  # optional: clean slate
    cur.execute('''
        CREATE TABLE IF NOT EXISTS tmdb_table (
            id INTEGER PRIMARY KEY,
            title TEXT,
            total_revenue INTEGER
        )
    ''')

    conn.commit()
    conn.close()

# ---------- FETCHING DATA ----------

def fetch_popular_movies(page=1):
    url = f"{BASE_URL}/movie/popular?api_key={API_KEY}&language=en-US&page={page}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()["results"]
    else:
        print("Error fetching popular movies:", response.text)
        return []

def get_movie_details(tmdb_id):
    url = f"{BASE_URL}/movie/{tmdb_id}?api_key={API_KEY}&language=en-US"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Error fetching details for movie ID {tmdb_id}")
        return {}

# ---------- STORE TO tmdb_table ----------

def store_tmdb_data(limit=25):
    create_tmdb_table()
    added_count = 0
    page = 1

    while added_count < limit:
        movies = fetch_popular_movies(page)
        if not movies:
            break

        for movie in movies:
            details = get_movie_details(movie["id"])
            title = details.get("title")
            tmdb_id = movie["id"]
            revenue = details.get("revenue", 0)

            conn = sqlite3.connect(DB_NAME)
            cur = conn.cursor()
            try:
                cur.execute("INSERT INTO tmdb_table (id, title, total_revenue) VALUES (?, ?, ?)",
                            (tmdb_id, title, revenue))
                conn.commit()
                added_count += 1
                print(f"✅ Added: {title}")
            except sqlite3.IntegrityError:
                print(f"⚠️ Skipped duplicate: {title}")
            finally:
                conn.close()

            if added_count >= limit:
                break

        page += 1
        time.sleep(1)  # respect API rate limits

# ---------- MAIN ----------

if __name__ == "__main__":
    store_tmdb_data()
