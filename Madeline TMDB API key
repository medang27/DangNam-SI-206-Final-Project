import sqlite3
import requests
import time
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

API_KEY = "e4d04998880c3bf739e025355c5327b9"
BASE_URL = "https://api.themoviedb.org/3"
DB_NAME = "movies.db"

# ---------- DB SETUP ----------
def create_tmdb_table():
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()

    # Create tmdb_table if it doesn't exist
    cur.execute('''
        CREATE TABLE IF NOT EXISTS tmdb_table (
            id INTEGER PRIMARY KEY,
            title TEXT,
            total_revenue INTEGER
        )
    ''')

    conn.commit()
    conn.close()

# ---------- FETCHING DATA ----------
def fetch_popular_movies(page=1):
    url = f"{BASE_URL}/movie/popular?api_key={API_KEY}&language=en-US&page={page}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()["results"]
    else:
        print("Error fetching popular movies:", response.text)
        return []

def get_movie_details(tmdb_id):
    url = f"{BASE_URL}/movie/{tmdb_id}?api_key={API_KEY}&language=en-US"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Error fetching details for movie ID {tmdb_id}")
        return {}

# ---------- STORE MOVIE IN DB ----------
def store_movie_in_db(movie_data):
    tmdb_id = movie_data["id"]
    title = movie_data["title"]
    revenue = movie_data.get("revenue", 0)

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()

    # Check if the movie is already in the database
    cur.execute("SELECT 1 FROM tmdb_table WHERE id = ?", (tmdb_id,))
    if cur.fetchone():
        conn.close()
        return False  # Duplicate found, don't insert

    # Insert movie data if not a duplicate
    cur.execute("INSERT INTO tmdb_table (id, title, total_revenue) VALUES (?, ?, ?)",
                (tmdb_id, title, revenue))
    conn.commit()
    conn.close()

    return True  # Successfully inserted

def store_tmdb_data(limit=25):
    create_tmdb_table()  # Create the table if not already present
    inserted_count = 0
    page = 1

    while inserted_count < limit:
        movies = fetch_popular_movies(page)
        if not movies:
            break

        for movie in movies:
            details = get_movie_details(movie["id"])
            movie_data = {
                "id": movie["id"],
                "title": details.get("title"),
                "revenue": details.get("revenue", 0)
            }

            if movie_data:
                was_inserted = store_movie_in_db(movie_data)
                if was_inserted:
                    inserted_count += 1
                    print(f"[+]{inserted_count}: Stored '{movie_data['title']}'")

            if inserted_count >= limit:
                break

        page += 1
        time.sleep(1)  # Be nice to the API


# ---------- JOINED TABLE WITH SHARED INTEGER KEY ----------
def create_joined_table_with_key(db_name='movies.db'):
    conn = sqlite3.connect(db_name)
    cur = conn.cursor()

    # Drop if exists (for testing purposes)
    cur.execute('DROP TABLE IF EXISTS joined_movies')

    # Create joined table with shared key
    cur.execute('''
        CREATE TABLE joined_movies (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT,
            imdb_rating REAL,
            total_revenue INTEGER
        )
    ''')

    # Insert data from JOIN of omdb_movies and tmdb_table
    cur.execute('''
        INSERT INTO joined_movies (title, imdb_rating, total_revenue)
        SELECT o.title, o.imdb_rating, t.total_revenue
        FROM omdb_movies o
        JOIN tmdb_table t ON o.title = t.title
        WHERE o.imdb_rating IS NOT NULL AND t.total_revenue > 0
    ''')

    conn.commit()
    conn.close()
    print("[INFO] joined_movies table with shared integer key created.")

# ---------- LOAD JOINED DATA ----------
def load_joined_data(db_name='movies.db'):
    conn = sqlite3.connect(db_name)
    df = pd.read_sql_query("SELECT * FROM joined_movies", conn)
    conn.close()
    return df

# ---------- CORRELATION HEATMAP ----------
def create_correlation_heatmap(df):
    # Calculate correlation matrix
    corr = df[['imdb_rating', 'total_revenue']].corr()

    # Set up the plot
    plt.figure(figsize=(6, 4))
    sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f", vmin=-1, vmax=1)

    # Customize the plot
    plt.title("Correlation Heatmap: IMDb Rating vs Total Revenue")
    plt.tight_layout()

    # Show or save the plot
    plt.savefig('correlation_heatmap.png')
    plt.show()

# ---------- CORRELATION CALCULATION + OUTPUT FILE ----------
def calculate_and_save_correlation(df, output_file='correlation_output.txt'):
    # Drop rows with missing data just in case
    df_clean = df.dropna(subset=['imdb_rating', 'total_revenue'])

    # Calculate Pearson correlation
    correlation = df_clean['imdb_rating'].corr(df_clean['total_revenue'])

    # Write to file
    with open(output_file, 'w') as f:
        f.write(f"Correlation between IMDb rating and total revenue: {correlation:.4f}\n")

    print(f"[INFO] Correlation saved to {output_file}")


if __name__ == "__main__":
    store_tmdb_data()  # Store data from TMDb API
    create_joined_table_with_key()  # Create joined table
    df = load_joined_data()  # Load into DataFrame
    create_correlation_heatmap(df)  # Plot heatmap
    calculate_and_save_correlation(df)  # Write correlation to output file
