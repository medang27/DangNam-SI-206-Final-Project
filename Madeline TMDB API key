import sqlite3
import requests
import time

API_KEY = "e4d04998880c3bf739e025355c5327b9"
BASE_URL = "https://api.themoviedb.org/3"
DB_NAME = "movies.db"

# ---------- DB SETUP ----------
def create_tmdb_table():
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()

    # Create tmdb_table if it doesn't exist
    cur.execute('''
        CREATE TABLE IF NOT EXISTS tmdb_table (
            id INTEGER PRIMARY KEY,
            title TEXT,
            total_revenue INTEGER
        )
    ''')

    conn.commit()
    conn.close()

# ---------- FETCHING DATA ----------
def fetch_popular_movies(page=1):
    url = f"{BASE_URL}/movie/popular?api_key={API_KEY}&language=en-US&page={page}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()["results"]
    else:
        print("Error fetching popular movies:", response.text)
        return []

def get_movie_details(tmdb_id):
    url = f"{BASE_URL}/movie/{tmdb_id}?api_key={API_KEY}&language=en-US"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Error fetching details for movie ID {tmdb_id}")
        return {}

# ---------- STORE MOVIE IN DB ----------
def store_movie_in_db(movie_data):
    tmdb_id = movie_data["id"]
    title = movie_data["title"]
    revenue = movie_data.get("revenue", 0)

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()

    # Check if the movie is already in the database
    cur.execute("SELECT 1 FROM tmdb_table WHERE id = ?", (tmdb_id,))
    if cur.fetchone():
        conn.close()
        return False  # Duplicate found, don't insert

    # Insert movie data if not a duplicate
    cur.execute("INSERT INTO tmdb_table (id, title, total_revenue) VALUES (?, ?, ?)",
                (tmdb_id, title, revenue))
    conn.commit()
    conn.close()

    return True  # Successfully inserted

def store_tmdb_data(limit=25):
    create_tmdb_table()  # Create the table if not already present
    inserted_count = 0
    page = 1

    while inserted_count < limit:
        movies = fetch_popular_movies(page)
        if not movies:
            break

        for movie in movies:
            details = get_movie_details(movie["id"])
            movie_data = {
                "id": movie["id"],
                "title": details.get("title"),
                "revenue": details.get("revenue", 0)
            }

            if movie_data:
                was_inserted = store_movie_in_db(movie_data)
                if was_inserted:
                    inserted_count += 1
                    print(f"[+]{inserted_count}: Stored '{movie_data['title']}'")

            if inserted_count >= limit:
                break

        page += 1
        time.sleep(1)  # Be nice to the API


# ---------- MAIN ----------
if __name__ == "__main__":
    store_tmdb_data()  # Run this to store the movies
