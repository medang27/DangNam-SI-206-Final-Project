# work on OMDb API code here

import requests
import sqlite3
import os
import time

# Set API keys
OMDB_API_KEY = '845af1f7'
TMDB_API_KEY = 'e4d04998880c3bf739e025355c5327b9'

# API URLs
OMDB_URL = 'https://www.omdbapi.com/'
TMDB_URL = "https://api.themoviedb.org/3"

# SQLite DB setup
DB_NAME = 'movies.db'
TABLE_NAME = 'omdb_movies'
TMDB_TABLE_NAME = 'tmdb_table'
JOINED_TABLE_NAME = 'joined_movies'


# Create SQLite database and table (without Rotten Tomatoes rating)
def setup_database():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(f'''
        CREATE TABLE IF NOT EXISTS {TABLE_NAME} (
            imdb_id TEXT PRIMARY KEY,
            title TEXT,
            imdb_rating REAL
        )
    ''')
    conn.commit()
    conn.close()

# Get a page of popular movie titles from TMDb
def fetch_titles_from_tmdb(page=1):
    url = f"{TMDB_URL}/movie/popular"
    params = {
        "api_key": TMDB_API_KEY,
        "language": "en-US",
        "page": page
    }

    response = requests.get(url, params=params)
    if response.status_code != 200:
        print(f"[TMDB ERROR {response.status_code}]: {response.text}")
        return []

    try:
        data = response.json()
        return [movie['title'] for movie in data.get('results', [])]
    except Exception as e:
        print(f"[JSON DECODE ERROR]: {e}")
        print("Response text:", response.text)
        return []

# Query OMDb for details on one movie
def fetch_movie_data_from_omdb(title):
    params = {
        't': title,
        'apikey': OMDB_API_KEY
    }

    response = requests.get(OMDB_URL, params=params)
    if response.status_code != 200:
        print(f"[OMDB ERROR {response.status_code}]: {response.text}")
        return None

    try:
        data = response.json()
        if data.get("Response") == "False":
            return None

        imdb_id = data.get("imdbID")
        imdb_rating = float(data.get("imdbRating", 0)) if data.get("imdbRating") not in ['N/A', None] else None

        return {
            "title": data.get("Title"),
            "imdb_id": imdb_id,
            "imdb_rating": imdb_rating
        }
    except Exception as e:
        print(f"[OMDB JSON ERROR]: {e}")
        return None

# Store one movie record in SQLite (only if it's new)
def store_movie_in_db(movie_data):
    if not movie_data or not movie_data.get("imdb_id"):
        return False  # Skip invalid

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(f'''
        INSERT OR IGNORE INTO {TABLE_NAME} (imdb_id, title, imdb_rating)
        VALUES (?, ?, ?)
    ''', (
        movie_data["imdb_id"],
        movie_data["title"],
        movie_data["imdb_rating"]
    ))
    conn.commit()
    rows_affected = cursor.rowcount
    conn.close()

    return rows_affected > 0  # True if inserted

# Fetch and store up to 25 NEW movies per execution
def fetch_and_store_movies():
    setup_database()

    inserted_count = 0
    page = 1

    print(f"[INFO] Starting data insertion (max 25 new items)...")

    while inserted_count < 25:
        titles = fetch_titles_from_tmdb(page)
        if not titles:
            break

        for title in titles:
            if inserted_count >= 25:
                break
            movie_data = fetch_movie_data_from_omdb(title)
            if movie_data:
                was_inserted = store_movie_in_db(movie_data)
                if was_inserted:
                    inserted_count += 1
                    print(f"[+]{inserted_count}: Stored '{movie_data['title']}'")
                else:
                    print(f"[=] Skipped duplicate: '{movie_data['title']}'")

            time.sleep(0.5)  # Respect API rate limits

        page += 1

    print(f"[DONE] Inserted {inserted_count} new movie(s) into the database.")

def setup_joined_table():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(f'''
        CREATE TABLE IF NOT EXISTS {JOINED_TABLE_NAME} (
            imdb_id TEXT PRIMARY KEY,
            title TEXT,
            imdb_rating REAL,
            tmdb_id INTEGER,
            total_revenue INTEGER
        )
    ''')
    conn.commit()
    conn.close()

def create_shared_movies_table():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS shared_movies (
            movie_id INTEGER PRIMARY KEY AUTOINCREMENT,
            imdb_id TEXT,
            tmdb_id INTEGER,
            title TEXT
        )
    ''')
    
    # Insert matched titles from both APIs
    cursor.execute(f'''
        INSERT INTO shared_movies (imdb_id, tmdb_id, title)
        SELECT omdb.imdb_id, tmdb.id, omdb.title
        FROM omdb_movies AS omdb
        JOIN tmdb_table AS tmdb
        ON omdb.title = tmdb.title
    ''')

    conn.commit()
    conn.close()
    print("[INFO] shared_movies table created and populated.")


def join_movies():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    cursor.execute(f'''
        INSERT INTO {JOINED_TABLE_NAME} (imdb_id, title, imdb_rating, tmdb_id, total_revenue)
        SELECT sm.imdb_id, omdb.title, omdb.imdb_rating, tmdb.id, tmdb.total_revenue
        FROM shared_movies AS sm
        JOIN omdb_movies AS omdb ON sm.imdb_id = omdb.imdb_id
        JOIN tmdb_table AS tmdb ON sm.tmdb_id = tmdb.id
    ''')

    conn.commit()
    conn.close()
    print("[INFO] joined_movies table updated.")




def main():
    fetch_and_store_movies()  # Fetch and store movies from OMDb and TMDb
    create_shared_movies_table()
    setup_joined_table()  # Create the joined table if not already created
    join_movies()  # Join the data from both tables and insert into the new table
    print("[INFO] Movies from OMDb and TMDb with overlapping titles have been joined.")

# Run the script
if __name__ == "__main__":
    main()

# Run the script
if __name__ == "__main__":
    fetch_and_store_movies()
