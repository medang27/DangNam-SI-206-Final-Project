# work on OMDb API code here

import requests
import sqlite3
import time

OMDB_API_KEY = "845af1f7"
OMDB_URL = "https://www.omdbapi.com/?i=tt3896198&apikey=845af1f7"

DB_NAME = "movieratings.db"

def create_db():
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()

    # Create movies table
    cur.execute('''
        CREATE TABLE IF NOT EXISTS movies (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT,
            release_date TEXT,
            imdbID TEXT UNIQUE
        )
    ''')

    # Create revenues table
    cur.execute('''
        CREATE TABLE IF NOT EXISTS revenues (
            movie_id INTEGER,
            imdb_rating REAL,
            rt_rating INTEGER,
            FOREIGN KEY (movie_id) REFERENCES movies(id)
        )
    ''')

    conn.commit()
    conn.close()

def get_existing_imdbIDs():
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("SELECT imdbID FROM movies")
    results = cur.fetchall()
    conn.close()
    return {row[0] for row in results}

def fetch_omdb_data(imdb_id):
    params = {'i': imdb_id, 'apikey': OMDB_API_KEY}
    response = requests.get(OMDB_URL, params=params)
    if response.status_code == 200:
        data = response.json()
        if data.get("Response") == "True":
            return {
                "title": data.get("Title"),
                "release_date": data.get("Released"),
                "imdbID": data.get("imdbID"),
                "imdb_rating": float(data.get("imdbRating", 0.0)),
                "rt_rating": get_rotten_tomatoes_rating(data.get("Ratings", []))
            }
    print(f"OMDb fetch failed for IMDb ID {imdb_id}")
    return None

def get_rotten_tomatoes_rating(ratings_list):
    for rating in ratings_list:
        if rating["Source"] == "Rotten Tomatoes":
            return int(rating["Value"].replace("%", ""))
    return None

def save_movie_to_db(movie_data):
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()

    # Save movie info to the movies table (if it doesn't already exist)
    cur.execute('''
        INSERT OR IGNORE INTO movies (title, release_date, imdbID)
        VALUES (?, ?, ?)
    ''', (movie_data["title"], movie_data["release_date"], movie_data["imdbID"]))

    # Retrieve movie ID
    cur.execute("SELECT id FROM movies WHERE imdbID = ?", (movie_data["imdbID"],))
    movie_id = cur.fetchone()[0]

    # Save revenue info (IMDb & RT ratings)
    cur.execute('''
        INSERT INTO revenues (movie_id, imdb_rating, rt_rating)
        VALUES (?, ?, ?)
    ''', (movie_id, movie_data["imdb_rating"], movie_data["rt_rating"]))

    conn.commit()
    conn.close()

def fetch_and_store_movies(imdb_ids):
    create_db()
    existing_ids = get_existing_imdbIDs()
    for imdb_id in imdb_ids:
        if imdb_id not in existing_ids:
            data = fetch_omdb_data(imdb_id)
            if data:
                save_movie_to_db(data)
                print(f"Saved: {data['title']} ({imdb_id})")
            time.sleep(1)
        else:
            print(f"Skipped: {imdb_id}")

# --- Example IMDb IDs for testing ---
imdb_ids = ["tt3896198", "tt0848228", "tt0816692"]  # Replace with actual IMDb IDs
fetch_and_store_movies(imdb_ids)