import requests
import sqlite3
import os
import time
import matplotlib.pyplot as plt

# Set API keys
OMDB_API_KEY = '845af1f7'
TMDB_API_KEY = 'e4d04998880c3bf739e025355c5327b9'

# API URLs
OMDB_URL = 'https://www.omdbapi.com/'
TMDB_URL = "https://api.themoviedb.org/3"

# SQLite DB setup
DB_NAME = 'movies.db'
TABLE_NAME = 'omdb_movies'
TMDB_TABLE_NAME = 'tmdb_table'
JOINED_TABLE_NAME = 'joined_movies'

# Create SQLite database and table with unique title
def setup_database():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    # Do NOT drop the table â€” just ensure it exists
    cursor.execute(f'''
        CREATE TABLE IF NOT EXISTS {TABLE_NAME} (
            imdb_id TEXT PRIMARY KEY,
            title TEXT UNIQUE,
            imdb_rating REAL
        )
    ''')
    conn.commit()
    conn.close()

# Helper to check for duplicate title
def is_title_already_stored(title):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(f"SELECT 1 FROM {TABLE_NAME} WHERE title = ?", (title,))
    exists = cursor.fetchone() is not None
    conn.close()
    return exists

# Get a page of popular movie titles from TMDb
def fetch_titles_from_tmdb(page=1):
    url = f"{TMDB_URL}/movie/popular"
    params = {
        "api_key": TMDB_API_KEY,
        "language": "en-US",
        "page": page
    }

    response = requests.get(url, params=params)
    if response.status_code != 200:
        print(f"[TMDB ERROR {response.status_code}]: {response.text}")
        return []

    try:
        data = response.json()
        return [movie['title'] for movie in data.get('results', [])]
    except Exception as e:
        print(f"[JSON DECODE ERROR]: {e}")
        print("Response text:", response.text)
        return []

# Query OMDb for details on one movie
def fetch_movie_data_from_omdb(title):
    params = {
        't': title,
        'apikey': OMDB_API_KEY
    }

    response = requests.get(OMDB_URL, params=params)
    if response.status_code != 200:
        print(f"[OMDB ERROR {response.status_code}]: {response.text}")
        return None

    try:
        data = response.json()
        if data.get("Response") == "False":
            return None

        imdb_id = data.get("imdbID")
        imdb_rating = float(data.get("imdbRating", 0)) if data.get("imdbRating") not in ['N/A', None] else None

        return {
            "title": data.get("Title"),
            "imdb_id": imdb_id,
            "imdb_rating": imdb_rating
        }
    except Exception as e:
        print(f"[OMDB JSON ERROR]: {e}")
        return None

# Store one movie record in SQLite (only if it's new)
def store_movie_in_db(movie_data):
    if not movie_data or not movie_data.get("imdb_id"):
        return False  # Skip invalid

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(f'''
        INSERT OR IGNORE INTO {TABLE_NAME} (imdb_id, title, imdb_rating)
        VALUES (?, ?, ?)
    ''', (
        movie_data["imdb_id"],
        movie_data["title"],
        movie_data["imdb_rating"]
    ))
    conn.commit()
    rows_affected = cursor.rowcount
    conn.close()

    return rows_affected > 0  # True if inserted

# Fetch and store up to 25 NEW movies per execution
def fetch_and_store_movies():
    setup_database()  # Ensure the database schema is correctly set up

    inserted_count = 0
    page = 1

    print(f"[INFO] Starting data insertion (max 25 new items)...")

    while inserted_count < 25:
        titles = fetch_titles_from_tmdb(page)
        if not titles:
            page += 1
            continue  # Move to next page if nothing returned

        for title in titles:
            if inserted_count >= 25:
                break

            if is_title_already_stored(title):
                print(f"[=] Skipped duplicate title: '{title}'")
                continue

            movie_data = fetch_movie_data_from_omdb(title)
            if movie_data:
                was_inserted = store_movie_in_db(movie_data)
                if was_inserted:
                    inserted_count += 1
                    print(f"[+]{inserted_count}: Stored '{movie_data['title']}'")
                else:
                    print(f"[=] Skipped: '{movie_data['title']}' (duplicate imdb_id)")

            time.sleep(0.5)  # Respect API rate limits

        page += 1

    print(f"[DONE] Inserted {inserted_count} new movie(s) into the database.")

def setup_joined_table():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(f'''
        CREATE TABLE IF NOT EXISTS {JOINED_TABLE_NAME} (
            imdb_id TEXT PRIMARY KEY,
            title TEXT,
            imdb_rating REAL,
            tmdb_id INTEGER,
            total_revenue INTEGER
        )
    ''')
    conn.commit()
    conn.close()

def create_shared_movies_table():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    cursor.execute('DROP TABLE IF EXISTS shared_movies')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS shared_movies (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT UNIQUE
        )
    ''')

    cursor.execute(f'''
        INSERT OR IGNORE INTO shared_movies (title)
        SELECT DISTINCT omdb.title
        FROM omdb_movies AS omdb
        JOIN tmdb_table AS tmdb
        ON omdb.title = tmdb.title
    ''')

    conn.commit()
    conn.close()
    print("[INFO] shared_movies table created with auto-generated ID and title.")


def join_movies():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    create_shared_movies_table()

    cursor.execute(f'''
        CREATE TABLE IF NOT EXISTS {JOINED_TABLE_NAME} (
            title TEXT PRIMARY KEY,
            imdb_rating REAL,
            total_revenue INTEGER
        )
    ''')

    cursor.execute(f'''
        INSERT INTO {JOINED_TABLE_NAME} (title, imdb_rating, total_revenue)
        SELECT omdb.title, omdb.imdb_rating, tmdb.total_revenue
        FROM shared_movies AS sm
        JOIN omdb_movies AS omdb ON sm.title = omdb.title
        JOIN tmdb_table AS tmdb ON sm.title = tmdb.title
    ''')

    conn.commit()
    conn.close()
    print("[INFO] joined_movies table updated with unique movie titles.")

def calculate_average_imdb_rating():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    cursor.execute("SELECT AVG(imdb_rating) FROM joined_movies")
    result = cursor.fetchone()
    conn.close()

    average = result[0] if result else None
    print(f"[INFO] Average IMDb Rating: {average}")
    return average

def write_average_to_file(average, filename="average_rating.txt"):
    with open(filename, "w") as f:
        f.write(f"Average IMDb Rating: {average:.2f}\n")
    print(f"[INFO] Average written to {filename}")

def visualize_ratings():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # Fetch up to 20 movies (increase the number if there are more than 10)
    cursor.execute("SELECT title, imdb_rating FROM joined_movies ORDER BY imdb_rating DESC LIMIT 20")
    data = cursor.fetchall()
    conn.close()

    # If fewer than 10, show the available data
    if not data:
        print("[INFO] No data found for visualization.")
        return

    titles = [row[0] for row in data]
    ratings = [row[1] for row in data]

    plt.figure(figsize=(12, 8))
    plt.barh(titles, ratings, color='skyblue')
    plt.xlabel("IMDb Rating")
    plt.title("Top Movies by IMDb Rating")
    plt.gca().invert_yaxis()  # To have the highest rated movie at the top
    plt.tight_layout()
    plt.savefig("top_movies_imdb_ratings.png")
    plt.show()
    print("[INFO] Visualization saved and displayed.")


def main():
    fetch_and_store_movies()
    setup_joined_table()
    join_movies()
    average_rating = calculate_average_imdb_rating()
    write_average_to_file(average_rating)
    visualize_ratings()
    print("[INFO] Movies from OMDb and TMDb with overlapping titles have been joined.")

if __name__ == "__main__":
    main()
