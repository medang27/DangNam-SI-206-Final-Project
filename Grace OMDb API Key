# work on OMDb API code here

import json
import sqlite3
import requests
import time

OMDB_API_KEY = "845af1f7"
OMDB_URL = "https://www.omdbapi.com/"
DB_NAME = "movieratings.db"

def get_json_content(cache_file):
    ''' Helper function to load data from cache file '''
    try:
        with open(cache_file, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_json_content(data, cache_file):
    ''' Helper function to save data to cache file '''
    with open(cache_file, 'w') as f:
        json.dump(data, f, indent=4)

def get_rotten_tomatoes_cache():
    ''' Fetch Rotten Tomatoes ratings from cache '''
    return get_json_content('rottentomatoes_cache.json')

def save_rotten_tomatoes_cache(data):
    ''' Save Rotten Tomatoes ratings to cache '''
    save_json_content(data, 'rottentomatoes_cache.json')

def get_imdb_cache():
    ''' Fetch IMDb ratings from cache '''
    return get_json_content('imdb_cache.json')

def save_imdb_cache(data):
    ''' Save IMDb ratings to cache '''
    save_json_content(data, 'imdb_cache.json')

def fetch_omdb_data(imdb_id):
    params = {'i': imdb_id, 'apikey': OMDB_API_KEY}
    response = requests.get(OMDB_URL, params=params)
    if response.status_code == 200:
        data = response.json()
        if data.get("Response") == "True":
            return {
                "title": data.get("Title"),
                "release_date": data.get("Released"),
                "imdbID": data.get("imdbID"),
                "imdb_rating": float(data.get("imdbRating", 0.0)),
                "rt_rating": get_rotten_tomatoes_rating(data.get("Ratings", []))
            }
    print(f"OMDb fetch failed for IMDb ID {imdb_id}")
    return None

def get_rotten_tomatoes_rating(ratings_list):
    ''' Get Rotten Tomatoes rating from ratings list '''
    for rating in ratings_list:
        if rating.get("Source") == "Rotten Tomatoes":
            return int(rating.get("Value").replace("%", ""))
    return None

def get_imdb_rating(ratings_list):
    ''' Get IMDb rating from ratings list '''
    for rating in ratings_list:
        if rating.get("Source") == "Internet Movie Database":
            return float(rating.get("Value").replace("/10", ""))
    return None

def create_db():
    ''' Create SQLite tables '''
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()

    cur.execute('''
        CREATE TABLE IF NOT EXISTS movies (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT,
            release_date TEXT,
            imdbID TEXT UNIQUE
        )
    ''')

    cur.execute('''
        CREATE TABLE IF NOT EXISTS ratings (
            movie_id INTEGER,
            imdb_rating REAL,
            rt_rating INTEGER,
            FOREIGN KEY (movie_id) REFERENCES movies(id)
        )
    ''')

    conn.commit()
    conn.close()

def save_movie_to_db(movie_data):
    ''' Save movie and ratings data to SQLite '''
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()

    cur.execute('''
        INSERT OR IGNORE INTO movies (title, release_date, imdbID)
        VALUES (?, ?, ?)
    ''', (movie_data["title"], movie_data["release_date"], movie_data["imdbID"]))

    cur.execute("SELECT id FROM movies WHERE imdbID = ?", (movie_data["imdbID"],))
    movie_id = cur.fetchone()[0]

    cur.execute('''
        INSERT INTO ratings (movie_id, imdb_rating, rt_rating)
        VALUES (?, ?, ?)
    ''', (movie_id, movie_data["imdb_rating"], movie_data["rt_rating"]))

    conn.commit()
    conn.close()

def fetch_and_store_movies(imdb_ids):
    ''' Fetch and store movies from OMDb API, saving them in SQLite '''
    create_db()
    for imdb_id in imdb_ids:
        data = fetch_omdb_data(imdb_id)
        if data:
            save_movie_to_db(data)
            print(f"Saved: {data['title']} ({imdb_id})")
        time.sleep(1)

# Example IMDb IDs for testing
imdb_ids = ["tt3896198", "tt0848228", "tt0816692"]
fetch_and_store_movies(imdb_ids)
